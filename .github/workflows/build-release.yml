name: Build & Release VeL-MuSiC (Multi-Platform)

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*' # Runs only when a version tag like v1.0.0 is pushed
  workflow_dispatch: # Allow manual trigger
    inputs:
      version:
        description: 'Release version (e.g., 1.1.0)'
        required: false
        default: ''
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: true
        type: boolean

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: android
            artifact_name: android
          - os: windows-latest
            platform: windows
            artifact_name: windows
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history for proper versioning
          
      - name: üîß Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: üîß Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          
      - name: üîç Debug repository structure
        shell: bash
        run: |
          echo "=== Repository Structure ==="
          ls -la
          echo ""
          echo "=== Looking for Flutter files ==="
          find . -name "pubspec.yaml" -o -name "lib" -type d -o -name "android" -type d | head -10
          echo ""
          echo "=== Checking common Flutter directories ==="
          for dir in . flutter_app app src VeL-MuSiC vel-music; do
            if [ -d "$dir" ] && [ -f "$dir/pubspec.yaml" ]; then
              echo "Found pubspec.yaml in: $dir"
            fi
          done
      
      - name: üîç Find Flutter project directory
        id: find-flutter
        shell: bash
        run: |
          # Check root directory first
          if [ -f "pubspec.yaml" ]; then
            echo "FLUTTER_DIR=." >> $GITHUB_OUTPUT
            echo "Flutter project found in root directory"
          # Check common subdirectories
          elif [ -f "flutter_app/pubspec.yaml" ]; then
            echo "FLUTTER_DIR=flutter_app" >> $GITHUB_OUTPUT
            echo "Flutter project found in flutter_app directory"
          elif [ -f "app/pubspec.yaml" ]; then
            echo "FLUTTER_DIR=app" >> $GITHUB_OUTPUT
            echo "Flutter project found in app directory"
          elif [ -f "VeL-MuSiC/pubspec.yaml" ]; then
            echo "FLUTTER_DIR=VeL-MuSiC" >> $GITHUB_OUTPUT
            echo "Flutter project found in VeL-MuSiC directory"
          elif [ -f "vel-music/pubspec.yaml" ]; then
            echo "FLUTTER_DIR=vel-music" >> $GITHUB_OUTPUT
            echo "Flutter project found in vel-music directory"
          else
            # Search for pubspec.yaml in any subdirectory (up to 2 levels deep)
            FLUTTER_DIR=$(find . -maxdepth 2 -name "pubspec.yaml" -type f | head -1 | xargs dirname 2>/dev/null)
            if [ -n "$FLUTTER_DIR" ] && [ "$FLUTTER_DIR" != "." ]; then
              # Remove leading ./ if present
              FLUTTER_DIR=${FLUTTER_DIR#./}
              echo "FLUTTER_DIR=$FLUTTER_DIR" >> $GITHUB_OUTPUT
              echo "Flutter project found in $FLUTTER_DIR directory"
            elif [ -n "$FLUTTER_DIR" ] && [ "$FLUTTER_DIR" = "." ]; then
              echo "FLUTTER_DIR=." >> $GITHUB_OUTPUT
              echo "Flutter project found in root directory"
            else
              echo "ERROR: No Flutter project found!"
              echo "Searched for pubspec.yaml in:"
              echo "- Root directory"
              echo "- Common subdirectories (flutter_app, app, VeL-MuSiC, vel-music)"
              echo "- All subdirectories up to 2 levels deep"
              exit 1
            fi
          fi

      - name: üì¶ Get version info
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract version from tag (e.g., refs/tags/v1.1.0 -> v1.1.0)
            VERSION=${GITHUB_REF#refs/tags/}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "TAG_VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            # Manual trigger with version specified
            VERSION="v${{ github.event.inputs.version }}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "TAG_VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "SHOULD_RELEASE=${{ github.event.inputs.create_release }}" >> $GITHUB_OUTPUT
          else
            # Auto-increment version for regular pushes
            # Get the latest version tag
            LATEST_TAG=$(git tag -l "v*" --sort=-version:refname | head -1)
            if [ -z "$LATEST_TAG" ]; then
              # No previous tags, start with v1.0.0
              NEW_VERSION="v1.0.0"
            else
              # Extract version numbers and increment patch
              CURRENT_VERSION=${LATEST_TAG#v}
              IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
              MAJOR=${VERSION_PARTS[0]}
              MINOR=${VERSION_PARTS[1]}
              PATCH=${VERSION_PARTS[2]}
              
              # Auto-increment patch version
              PATCH=$((PATCH + 1))
              NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            fi
            
            VERSION=$NEW_VERSION
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "TAG_VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
          fi
          echo "Using version: $VERSION"
          
      - name: üì¶ Install Dependencies
        working-directory: ${{ steps.find-flutter.outputs.FLUTTER_DIR }}
        run: flutter pub get

      # Windows-specific setup
      - name: üîß Setup Windows Build Environment
        if: matrix.platform == 'windows'
        run: |
          flutter config --enable-windows-desktop
        
      # Android builds
      - name: üõ†Ô∏è Build Universal APK
        if: matrix.platform == 'android'
        working-directory: ${{ steps.find-flutter.outputs.FLUTTER_DIR }}
        run: flutter build apk --release
        
      - name: üõ†Ô∏è Build Split APKs (per ABI)
        if: matrix.platform == 'android'
        working-directory: ${{ steps.find-flutter.outputs.FLUTTER_DIR }}
        run: flutter build apk --release --split-per-abi
        
      - name: üì¶ Build Android App Bundle (AAB)
        if: matrix.platform == 'android'
        working-directory: ${{ steps.find-flutter.outputs.FLUTTER_DIR }}
        run: flutter build appbundle --release

      # Windows builds
      - name: üõ†Ô∏è Build Windows App
        if: matrix.platform == 'windows'
        working-directory: ${{ steps.find-flutter.outputs.FLUTTER_DIR }}
        run: flutter build windows --release

      - name: üìÅ Create builds directory structure
        shell: bash
        run: |
          mkdir -p builds/${{ steps.version.outputs.VERSION }}

      # Copy Android builds
      - name: üìã Copy Android builds to repository folder
        if: matrix.platform == 'android'
        shell: bash
        run: |
          # Copy universal APK
          cp ${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-release.apk builds/${{ steps.version.outputs.VERSION }}/VeL-MuSiC-universal-${{ steps.version.outputs.VERSION }}.apk
          
          # Copy split APKs if they exist
          if [ -f "${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk" ]; then
            cp ${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk builds/${{ steps.version.outputs.VERSION }}/VeL-MuSiC-armeabi-v7a-${{ steps.version.outputs.VERSION }}.apk
          fi
          
          if [ -f "${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-arm64-v8a-release.apk" ]; then
            cp ${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-arm64-v8a-release.apk builds/${{ steps.version.outputs.VERSION }}/VeL-MuSiC-arm64-v8a-${{ steps.version.outputs.VERSION }}.apk
          fi
          
          if [ -f "${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-x86_64-release.apk" ]; then
            cp ${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/flutter-apk/app-x86_64-release.apk builds/${{ steps.version.outputs.VERSION }}/VeL-MuSiC-x86_64-${{ steps.version.outputs.VERSION }}.apk
          fi
          
          # Copy AAB file
          if [ -f "${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/bundle/release/app-release.aab" ]; then
            cp ${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/app/outputs/bundle/release/app-release.aab builds/${{ steps.version.outputs.VERSION }}/VeL-MuSiC-${{ steps.version.outputs.VERSION }}.aab
          fi

      # Copy Windows builds
      - name: üìã Copy Windows builds to repository folder
        if: matrix.platform == 'windows'
        shell: bash
        run: |
          # Create Windows build archive
          cd ${{ steps.find-flutter.outputs.FLUTTER_DIR }}/build/windows/x64/runner/Release
          
          # Use PowerShell for Windows compression
          powershell Compress-Archive -Path "." -DestinationPath "../../../../../VeL-MuSiC-windows-${{ steps.version.outputs.VERSION }}.zip"
          
          # Copy to builds directory
          cd ../../../../../
          cp VeL-MuSiC-windows-${{ steps.version.outputs.VERSION }}.zip builds/${{ steps.version.outputs.VERSION }}/

      # Upload artifacts for cross-job sharing
      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-builds-${{ steps.version.outputs.VERSION }}
          path: builds/
          retention-days: 5

  # Combine all builds and create release
  release:
    needs: build
    runs-on: ubuntu-latest
    if: always() && (needs.build.result == 'success' || contains(needs.build.result, 'success'))
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: üì¶ Get version info
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date +'%Y%m%d-%H%M%S')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      # Download all build artifacts
      - name: üì• Download Android builds
        uses: actions/download-artifact@v4
        with:
          name: android-builds-${{ steps.version.outputs.VERSION }}
          path: ./
        continue-on-error: true

      - name: üì• Download Windows builds  
        uses: actions/download-artifact@v4
        with:
          name: windows-builds-${{ steps.version.outputs.VERSION }}
          path: ./
        continue-on-error: true

      - name: üìã Create unified build info
        run: |
          # Ensure builds directory exists
          mkdir -p builds/${{ steps.version.outputs.VERSION }}
          
          # Create a build info file
          echo "Build Information" > builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "=================" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "Version: ${{ steps.version.outputs.VERSION }}" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "Build Date: $(date -u)" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "Commit SHA: ${{ github.sha }}" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "Branch/Tag: ${{ github.ref }}" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "Workflow: ${{ github.workflow }}" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "Run ID: ${{ github.run_id }}" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          echo "Platforms Built:" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          
          # List available files
          if ls builds/${{ steps.version.outputs.VERSION }}/*.apk 1> /dev/null 2>&1; then
            echo "- Android (APK/AAB)" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          fi
          if ls builds/${{ steps.version.outputs.VERSION }}/*windows*.zip 1> /dev/null 2>&1; then
            echo "- Windows (ZIP)" >> builds/${{ steps.version.outputs.VERSION }}/BUILD_INFO.txt
          fi
          
      - name: üìù Update builds index
        run: |
          # Create or update the index file
          if [ ! -f "builds/README.md" ]; then
            echo "# VeL-MuSiC Multi-Platform Builds" > builds/README.md
            echo "" >> builds/README.md
            echo "This directory contains all built applications for VeL-MuSiC across different platforms." >> builds/README.md
            echo "" >> builds/README.md
            echo "## Available Builds" >> builds/README.md
            echo "" >> builds/README.md
          fi
          
          # Add current build to index
          echo "### Version ${{ steps.version.outputs.VERSION }}" >> builds/README.md
          echo "- **Build Date:** $(date -u)" >> builds/README.md
          echo "- **Commit:** [${{ github.sha }}](../../commit/${{ github.sha }})" >> builds/README.md
          echo "- **Files:**" >> builds/README.md
          
          # List all files in the version directory
          for file in builds/${{ steps.version.outputs.VERSION }}/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "  - [$filename](${{ steps.version.outputs.VERSION }}/$filename)" >> builds/README.md
            fi
          done
          echo "" >> builds/README.md
          
      - name: üè∑Ô∏è Create and push tag (if needed)
        if: steps.version.outputs.SHOULD_RELEASE == 'true' && !startsWith(github.ref, 'refs/tags/')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if tag already exists
          if git rev-parse "${{ steps.version.outputs.TAG_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.TAG_VERSION }} already exists"
          else
            # Pull latest changes before creating tag
            git pull origin ${{ github.ref_name }} --rebase || true
            git tag ${{ steps.version.outputs.TAG_VERSION }}
            
            # Retry tag push up to 3 times
            for i in {1..3}; do
              if git push origin ${{ steps.version.outputs.TAG_VERSION }}; then
                echo "Successfully pushed tag on attempt $i"
                break
              else
                echo "Tag push failed on attempt $i, retrying..."
                sleep 2
              fi
            done
          fi

      - name: üöÄ Commit builds to repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Pull latest changes to avoid conflicts
          git pull origin ${{ github.ref_name }} --rebase || true
          
          git add builds/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add multi-platform builds for version ${{ steps.version.outputs.VERSION }}"
            
            # Retry push up to 3 times in case of conflicts
            for i in {1..3}; do
              if git push; then
                echo "Successfully pushed on attempt $i"
                break
              else
                echo "Push failed on attempt $i, pulling and retrying..."
                git pull origin ${{ github.ref_name }} --rebase
                sleep 2
              fi
            done
          fi
        
      - name: üì§ Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: steps.version.outputs.SHOULD_RELEASE == 'true'
        with:
          tag_name: ${{ steps.version.outputs.TAG_VERSION }}
          name: "VeL-MuSiC ${{ steps.version.outputs.VERSION }}"
          files: |
            builds/${{ steps.version.outputs.VERSION }}/*
          body: |
            ## VeL-MuSiC Multi-Platform Release ${{ steps.version.outputs.VERSION }}
            
            ### üì± Android Downloads
            
            **Universal APK (Recommended for most users):**
            - `VeL-MuSiC-universal-*.apk` - Works on all Android devices
            
            **Optimized APKs (Smaller file size):**
            - `VeL-MuSiC-armeabi-v7a-*.apk` - For older 32-bit ARM devices
            - `VeL-MuSiC-arm64-v8a-*.apk` - For modern 64-bit ARM devices (most common)
            - `VeL-MuSiC-x86_64-*.apk` - For x86_64 devices
            
            **For Play Store:**
            - `VeL-MuSiC-*.aab` - Android App Bundle for Google Play Store
            
            ### ü™ü Windows Downloads
            
            **Windows Desktop App:**
            - `VeL-MuSiC-windows-*.zip` - Windows desktop application (extract and run)
            
            ### üìã Build Information
            - **Build Date:** $(date -u)
            - **Commit:** ${{ github.sha }}
            - **Workflow Run:** [${{ github.run_id }}](../../actions/runs/${{ github.run_id }})
            
            ### üìÅ Repository Builds
            All builds are also available in the [builds folder](../../tree/main/builds) of this repository.
            
            ### üöÄ Installation Instructions
            
            **Android:**
            1. Download the appropriate APK file
            2. Enable "Unknown sources" in Android settings
            3. Install the APK
            
            **Windows:**
            1. Download the ZIP file
            2. Extract all contents to a folder
            3. Run `vel_music.exe`
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
